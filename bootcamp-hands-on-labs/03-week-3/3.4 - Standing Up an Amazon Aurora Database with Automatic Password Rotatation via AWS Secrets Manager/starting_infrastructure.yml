AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a new custom VPC with 3 tiers of subnets. One public, two private.
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: "Name"
          Value: "Your Custom VPC"

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Public Subnet AZ A"
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: "AWS::Region"

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Public Subnet AZ B"
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs:
              Ref: "AWS::Region"

  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Public Subnet AZ C"
      AvailabilityZone:
        Fn::Select:
          - "2"
          - Fn::GetAZs:
              Ref: "AWS::Region"

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.10.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Subnet AZ A"
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: "AWS::Region"

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.11.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Subnet AZ B"
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs:
              Ref: "AWS::Region"

  PrivateSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.12.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Subnet AZ C"
      AvailabilityZone:
        Fn::Select:
          - "2"
          - Fn::GetAZs:
              Ref: "AWS::Region"

  DatabaseSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.20.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Database Subnet AZ A"
      AvailabilityZone:
        Fn::Select:
          - "0"
          - Fn::GetAZs:
              Ref: "AWS::Region"

  DatabaseSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.21.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Database Subnet AZ B"
      AvailabilityZone:
        Fn::Select:
          - "1"
          - Fn::GetAZs:
              Ref: "AWS::Region"

  DatabaseSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: "10.0.22.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Database Subnet AZ C"
      AvailabilityZone:
        Fn::Select:
          - "2"
          - Fn::GetAZs:
              Ref: "AWS::Region"

  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Public Route Table"

  RouteTablePublicAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePublic"
      SubnetId:
        Ref: "PublicSubnet1"

  RouteTablePublicAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePublic"
      SubnetId:
        Ref: "PublicSubnet2"

  RouteTablePublicAssociation3:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePublic"
      SubnetId:
        Ref: "PublicSubnet3"

  RouteTablePublicRoute0:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId:
        Ref: "RouteTablePublic"
      GatewayId:
        Ref: "Igw"

  RouteTablePrivate1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Route Table A"

  RouteTablePrivate1Association1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePrivate1"
      SubnetId:
        Ref: "PrivateSubnet1"

  RouteTablePrivate1Route0:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId:
        Ref: "RouteTablePrivate1"
      NatGatewayId:
        Ref: "NatGw1"

  RouteTablePrivate2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Route Table B"

  RouteTablePrivate2Association1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePrivate2"
      SubnetId:
        Ref: "PrivateSubnet2"

  RouteTablePrivate2Route0:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId:
        Ref: "RouteTablePrivate2"
      NatGatewayId:
        Ref: "NatGw1"

  RouteTablePrivate3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value: "Private Route Table C"

  RouteTablePrivate3Association1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePrivate3"
      SubnetId:
        Ref: "PrivateSubnet3"

  RouteTablePrivate3Route0:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId:
        Ref: "RouteTablePrivate3"
      NatGatewayId:
        Ref: "NatGw1"

  # Route Table Associations for Database Subnets
  RouteTableDatabase1Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePrivate1" # Adjust this if needed
      SubnetId:
        Ref: "DatabaseSubnet1"

  RouteTableDatabase2Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePrivate2" # Adjust this if needed
      SubnetId:
        Ref: "DatabaseSubnet2"

  RouteTableDatabase3Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Ref: "RouteTablePrivate3" # Adjust this if needed
      SubnetId:
        Ref: "DatabaseSubnet3"

  Igw:
    Type: "AWS::EC2::InternetGateway"
    Properties: { }

  IGWAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "Igw"

  NatGw1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      AllocationId:
        Fn::GetAtt:
          - "NatGw1ElasticIP"
          - "AllocationId"
      Tags:
        - Key: "Name"
          Value: "NAT GW A"

  NatGw1ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  SystemsManagerEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: OurSystemsManagerEC2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: MySecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecrets
                  - secretsmanager:ListSecretVersionIds
                  - secretsmanager:RotateSecret
                Resource: '*'
      Tags:
        - Key: Name
          Value: SystemsManagerEC2Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: OurSystemsManagerEC2Profile
      Roles:
        - !Ref SystemsManagerEC2Role

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable all access from VPC
      GroupName: AllowAllVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 0
          CidrIp: !GetAtt VPC.CidrBlock

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !GetAtt MySecurityGroup.GroupId
      SubnetId:
        Ref: PrivateSubnet1
      IamInstanceProfile: !Ref EC2InstanceProfile
      Monitoring: true
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          
          # Installing mariadb client for MySQL connections
          sudo yum install -y mysql
          
          # Creating Python script
          cat <<EOF > /opt/get_secret.py
          import boto3
          import json
          from botocore.exceptions import ClientError


          def get_secret():
              secret_name = "REPLACE_ME"
              region_name = "us-east-1"

              # Create a Secrets Manager client
              # Initialize a session using AWS SDK
              session = boto3.session.Session()
              client = session.client(
                  service_name='secretsmanager',
                  region_name=region_name
              )

              try:
                  get_secret_value_response = client.get_secret_value(
                      SecretId=secret_name
                  )
              except ClientError as e:
                  raise e

              secret = get_secret_value_response['SecretString']

              # JSON loading secret
              secret_dict = json.loads(secret)

              # Extract the username and password values from the secret
              username = secret_dict["username"]
              password = secret_dict["password"]

              # Setting file path for saving current values
              file_path = "/tmp/secret_values.sh"
              value_to_write = f"""
              #!/bin/bash

              EXPORT MYSQL_USERNAME={username}
              EXPORT MYSQL_PASSWORD={password}
              """

              # Writing values to local text file
              try:
                  # Open the file in write mode
                  with open(file_path, 'w') as file:
                      # Write the value to the file
                      file.write(value_to_write)

                  print(f"Value successfully written to file at {file_path}")
                  print(f"Execute script using 'dto space syntax' to store environment variables outside of shell")
                  print(f"Example: . /tmp/secret_values.sh")

              except Exception as e:
                  print(f"Error writing to file: {e}")
          EOF
      Tags:
        - Key: Name
          Value: DatabaseClient
Metadata: { }
Conditions: { }
